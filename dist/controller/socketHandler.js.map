{"version":3,"sources":["../../src/controller/socketHandler.js"],"names":["io","server","on","console","log","socket","id","join","user","status","broadcast","emit","userList","peer","messages","message","textFrom","textTo","from","to","Object","keys","rooms","roomID"],"mappings":";;;;;;;;AAAA;;;;AACA;;AAKA;;;;kBAKe,kBAAU;AACvB,MAAMA,KAAK,sBAAOC,MAAP,CAAX;;AAEAD,KAAGE,EAAH,CAAM,YAAN,EAAoB,kBAAU;AAC5BC,YAAQC,GAAR,CAAY,QAAZ;;AAEAC,WAAOH,EAAP,CAAU,WAAV,EAAuB,gBAAY;AAAA,UAATI,EAAS,QAATA,EAAS;;AACjCD,aAAOE,IAAP,CAAYD,EAAZ;AACAD,aAAOG,IAAP,GAAcF,EAAd;AACA,gCAAU,EAAEE,MAAMF,EAAR,EAAYG,QAAQ,IAApB,EAAV;AACA,aAAOJ,OAAOK,SAAP,CAAiBC,IAAjB,CAAsB,yBAAtB,CAAP;AACD,KALD;;AAOAN,WAAOH,EAAP,CAAU,eAAV,EAA2B,iBAAc;AAAA,UAAXM,IAAW,SAAXA,IAAW;;AACvC,UAAG,CAACA,IAAJ,EACE;;AAEF,aAAO,4BAAYA,IAAZ,EAAkB;AAAA,eAAYH,OAAOM,IAAP,CAAY,eAAZ,EAA6BC,QAA7B,CAAZ;AAAA,OAAlB,CAAP;AACD,KALD;;AAOAP,WAAOH,EAAP,CAAU,cAAV,EAA0B,iBAAoB;AAAA,UAAjBM,IAAiB,SAAjBA,IAAiB;AAAA,UAAXK,IAAW,SAAXA,IAAW;;AAC5C,aAAO,+BAAY,EAACL,UAAD,EAAOK,UAAP,EAAZ,EAA0B;AAAA,eAAYR,OAAOM,IAAP,CAAY,cAAZ,EAA4BG,QAA5B,CAAZ;AAAA,OAA1B,CAAP;AACD,KAFD;;AAIAT,WAAOH,EAAP,CAAU,cAAV,EAA0B,iBAAmD;AAAA,UAAhDM,IAAgD,SAAhDA,IAAgD;AAAA,UAA1CK,IAA0C,SAA1CA,IAA0C;AAAA,gCAApCE,OAAoC;AAAA,UAAzBC,QAAyB,iBAAzBA,QAAyB;AAAA,UAAfC,MAAe,iBAAfA,MAAe;;AAC3E,aAAO,mCAAgB;AACrBD,0BADqB;AAErBC,sBAFqB;AAGrBC,cAAMV,IAHe;AAIrBW,YAAIN;AAJiB,OAAhB,EAKJ;AAAA,eAAWb,GAAGmB,EAAH,CAAMN,IAAN,EAAYF,IAAZ,CAAiB,iBAAjB,EAAoCI,OAApC,CAAX;AAAA,OALI,CAAP;AAMD,KAPD;;AASAV,WAAOH,EAAP,CAAU,eAAV,EAA2B,kBAAU;AAAA,yBACZkB,OAAOC,IAAP,CAAYhB,OAAOiB,KAAnB,CADY;AAAA;AAAA,UAC7BC,MAD6B;AAAA,UACrBf,IADqB;;AAEnCL,cAAQC,GAAR,CAAY,eAAZ,EAA6BI,IAA7B;AACA,UAAG,CAACA,IAAJ,EAAU;AACV,aAAO,0BAAU,EAAEA,UAAF,EAAQC,QAAQ,KAAhB,EAAV,CAAP;AACD,KALD;AAMD,GApCD;AAqCD,C","file":"socketHandler.js","sourcesContent":["import socket from 'socket.io'\r\nimport { \r\n  setOnline,\r\n  getUserList\r\n} from '../model/actions/UserModel'\r\n\r\nimport {\r\n  getMessages,\r\n  registerMessage\r\n} from '../model/actions/MessageModel'\r\n\r\nexport default server => {\r\n  const io = socket(server)\r\n  \r\n  io.on('connection', socket => {\r\n    console.log('joined')\r\n\r\n    socket.on('join-chat', ({ id }) => {\r\n      socket.join(id)\r\n      socket.user = id\r\n      setOnline({ user: id, status: true })\r\n      return socket.broadcast.emit('should-update-user-list')\r\n    })\r\n\r\n    socket.on('get-user-list', ({ user }) => {\r\n      if(!user)\r\n        return\r\n        \r\n      return getUserList(user, userList => socket.emit('set-user-list', userList))\r\n    })\r\n\r\n    socket.on('get-messages', ({ user, peer }) => {\r\n      return getMessages({user, peer}, messages => socket.emit('set-messages', messages))\r\n    })\r\n\r\n    socket.on('send-message', ({ user, peer, message: { textFrom, textTo } }) => {\r\n      return registerMessage({\r\n        textFrom,\r\n        textTo,\r\n        from: user,\r\n        to: peer\r\n      }, message => io.to(peer).emit('receive-message', message))\r\n    })\r\n\r\n    socket.on('disconnecting', reason => {\r\n      let [ roomID, user ] = Object.keys(socket.rooms)\r\n      console.log('disconnecting', user)\r\n      if(!user) return\r\n      return setOnline({ user, status: false })\r\n    })\r\n  })\r\n}\r\n\r\n\r\n"]}