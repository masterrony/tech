{"version":3,"sources":["../../../src/model/actions/MessageModel.js"],"names":["getUsersWithLastMessages","users","target","i","length","getLastMessage","lastMessage","getCompleteUsers","getUnreadCount","unreadCount","getMessages","cb","user","peer","markAsRead","getAllMessages","allMessages","messages","generateMessasge","registerMessage","textFrom","textTo","from","to","newMessage","Message","save","err","message","destructMsgToUser","deleteMany","exec","first","second","findOne","$or","$and","sort","find","read","unread","updateMany","toWkBefore","Date","now","created_at","$lte","lean","msg","gMsg","_id","createdAt","name"],"mappings":"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","file":"MessageModel.js","sourcesContent":["import \"regenerator-runtime/runtime.js\";\r\nimport Message from '../schemas/Message'\r\n\r\nexport const getUsersWithLastMessages = async ({ users, target }) => {\r\n  for (let i = 0; i < users.length; i++) {\r\n    let lastMessage = await getLastMessage(target, users[i]['_id']);\r\n    users[i] = { ...users[i], lastMessage }\r\n  }\r\n  return users\r\n}\r\n\r\nexport const getCompleteUsers = async ({ users, target }) => {\r\n  for (let i = 0; i < users.length; i++) {\r\n    let unreadCount = await getUnreadCount(users[i]['_id'], target);\r\n    users[i] = { ...users[i], unreadCount }\r\n  }\r\n  return users\r\n}\r\n\r\nexport const getMessages = async ({ user, peer }, cb) => {\r\n  // mark newly received messages as read\r\n  markAsRead(user, peer)\r\n\r\n  // get messages\r\n  let allMessages = await getAllMessages(user, peer)\r\n  let messages = []\r\n  for (let i = 0; i < allMessages.length; i++) {\r\n    messages[i] = generateMessasge(allMessages[i], user)\r\n  }\r\n  return cb(messages)\r\n}\r\n\r\nexport const registerMessage = ({ textFrom, textTo, from, to }, cb) => {\r\n  let newMessage = new Message({\r\n    textFrom, textTo, from, to\r\n  })\r\n  \r\n  newMessage.save((err, message) => {\r\n    if(!!err)\r\n      throw err\r\n      \r\n    return cb(generateMessasge(message, to))\r\n  })\r\n}\r\n\r\nexport const destructMsgToUser = ({ user }) => Message.deleteMany({ to: user }).exec()\r\n\r\nconst getLastMessage = async (first, second) => {\r\n  let lastMessage = await Message.findOne(\r\n    { \r\n      $or: [ \r\n        { $and: [\r\n          { from: first },\r\n          { to: second }\r\n        ]} , \r\n        { $and: [\r\n          { from: second },\r\n          { to: first }\r\n        ]}\r\n      ], \r\n    },\r\n    {}, \r\n    { sort: { 'created_at': -1 } }\r\n  ).exec()\r\n  return lastMessage\r\n}\r\n\r\nconst getUnreadCount = async (from, to) => {\r\n  let unread = await Message.find({ from, to, read: false }).exec()\r\n  return unread.length\r\n}\r\n\r\nconst markAsRead = (to, from) => Message.updateMany({ from, to }, { read: true }).exec()\r\n\r\nconst getAllMessages = async (first, second) => {\r\n  // destruct old messages first\r\n  let toWkBefore = new Date(Date.now() - 12096e5)\r\n  await Message.deleteMany(\r\n    {\r\n      $or: [\r\n        { $and: [\r\n          { from: first },\r\n          { to: second }\r\n        ]} , \r\n        { $and: [\r\n          { from: second },\r\n          { to: first }\r\n        ]}\r\n      ], \r\n      created_at: { \r\n        $lte: toWkBefore,\r\n      }\r\n    }\r\n  ).exec()\r\n  \r\n  // get remained messages\r\n  let messages = await Message.find(\r\n    {\r\n      $or: [\r\n        { $and: [\r\n          { from: first },\r\n          { to: second }\r\n        ]} , \r\n        { $and: [\r\n          { from: second },\r\n          { to: first }\r\n        ]}\r\n      ], \r\n    },\r\n    {}, \r\n    { sort: { 'created_at': -1 } }\r\n  ).lean().exec()\r\n  return messages\r\n}\r\n\r\nconst generateMessasge = (msg, user) => {\r\n  let gMsg = {}\r\n  gMsg._id = msg._id\r\n  gMsg.createdAt = msg.created_at\r\n  gMsg.from = msg.from\r\n  gMsg.textFrom = msg.textFrom\r\n  gMsg.textTo = msg.textTo\r\n  gMsg.user = {\r\n    _id: msg.from == user ? 1 : 2,\r\n    name: 'R'\r\n  }\r\n  return gMsg\r\n}"]}