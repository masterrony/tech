{"version":3,"sources":["../../../src/model/schemas/User.js"],"names":["UserSchema","Schema","deviceId","type","String","required","phone","password","isAdmin","Boolean","default","online","allowed","pubKey","contacts","Types","ObjectId","ref","created_at","Date","now","pre","next","user","isModified","bcrypt","genSalt","err","salt","hash","methods","verifyPassword","cand","compareSync"],"mappings":";;;;;;AAAA;;AACA;;;;;;AAEA,IAAMA,aAAa,IAAIC,gBAAJ,CAAW;AAC5BC,YAAU,EAAEC,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EADkB;AAE5BC,SAAO,EAAEH,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAFqB;AAG5BE,YAAU,EAAEJ,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAHkB;AAI5BG,WAAS,EAAEL,MAAMM,OAAR,EAAiBC,SAAS,KAA1B,EAJmB;AAK5BC,UAAQ,EAAER,MAAMM,OAAR,EAAiBC,SAAS,KAA1B,EALoB;AAM5BE,WAAS,EAAET,MAAMM,OAAR,EAAiBC,SAAS,KAA1B,EANmB;AAO5BG,UAAQ,EAAEV,MAAMC,MAAR,EAAgBM,SAAS,EAAzB,EAPoB;AAQ5BI,YAAU,CAAC;AACTX,UAAMF,iBAAOc,KAAP,CAAaC,QADV;AAETC,SAAK;AAFI,GAAD,CARkB;AAY5BC,cAAY,EAAEf,MAAMgB,IAAR,EAAcT,SAASS,KAAKC,GAA5B;AAZgB,CAAX,CAAnB;;AAeApB,WAAWqB,GAAX,CAAe,MAAf,EAAuB,UAASC,IAAT,EAAe;AACpC,MAAIC,OAAO,IAAX;;AAEA,MAAG,CAACA,KAAKC,UAAL,CAAgB,UAAhB,CAAJ,EAAiC,OAAOF,MAAP;;AAEjCG,mBAAOC,OAAP,CAAe,EAAf,EAAmB,UAACC,GAAD,EAAMC,IAAN,EAAe;AAChC,QAAG,CAAC,CAACD,GAAL,EAAU,OAAOL,KAAKK,GAAL,CAAP;;AAEVF,qBAAOI,IAAP,CAAYN,KAAKhB,QAAjB,EAA2BqB,IAA3B,EAAiC,UAACD,GAAD,EAAME,IAAN,EAAe;AAC9C,UAAG,CAAC,CAACF,GAAL,EAAU,OAAOL,KAAKK,GAAL,CAAP;;AAEVJ,WAAKhB,QAAL,GAAgBsB,IAAhB;AACA,aAAOP,MAAP;AACD,KALD;AAMD,GATD;AAUD,CAfD;;AAiBAtB,WAAW8B,OAAX,CAAmBC,cAAnB,GAAoC,UAASC,IAAT,EAAe;AACjD,SAAOP,iBAAOQ,WAAP,CAAmBD,IAAnB,EAAyB,KAAKzB,QAA9B,CAAP;AACD,CAFD;;kBAIe,qBAAM,MAAN,EAAcP,UAAd,C","file":"User.js","sourcesContent":["import { Schema, model } from 'mongoose'\r\nimport bcrypt from 'bcrypt'\r\n\r\nconst UserSchema = new Schema({\r\n  deviceId: { type: String, required: true },\r\n  phone: { type: String, required: true },\r\n  password: { type: String, required: true },\r\n  isAdmin: { type: Boolean, default: false },\r\n  online: { type: Boolean, default: false },\r\n  allowed: { type: Boolean, default: false },\r\n  pubKey: { type: String, default: '' },\r\n  contacts: [{\r\n    type: Schema.Types.ObjectId,\r\n    ref: 'User'\r\n  }],\r\n  created_at: { type: Date, default: Date.now }\r\n})\r\n\r\nUserSchema.pre('save', function(next) {\r\n  let user = this\r\n  \r\n  if(!user.isModified('password')) return next()\r\n\r\n  bcrypt.genSalt(10, (err, salt) => {\r\n    if(!!err) return next(err)\r\n\r\n    bcrypt.hash(user.password, salt, (err, hash) => {\r\n      if(!!err) return next(err)\r\n\r\n      user.password = hash\r\n      return next()\r\n    })\r\n  })\r\n})\r\n\r\nUserSchema.methods.verifyPassword = function(cand) {\r\n  return bcrypt.compareSync(cand, this.password)\r\n}\r\n \r\nexport default model('User', UserSchema)"]}